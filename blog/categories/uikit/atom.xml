<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: uikit | Hack Life of OpenFibers]]></title>
  <link href="http://openfibers.github.io/blog/categories/uikit/atom.xml" rel="self"/>
  <link href="http://openfibers.github.io/"/>
  <updated>2020-09-11T15:53:02+08:00</updated>
  <id>http://openfibers.github.io/</id>
  <author>
    <name><![CDATA[OpenFibers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[不带导航条的UIViewController推出带导航条的UIViewController]]></title>
    <link href="http://openfibers.github.io/blog/2015/12/15/controller-without-navigation-bar-push-new-navigation/"/>
    <updated>2015-12-15T17:55:19+08:00</updated>
    <id>http://openfibers.github.io/blog/2015/12/15/controller-without-navigation-bar-push-new-navigation</id>
    <content type="html"><![CDATA[<p>左侧controller A隐藏导航条，推出右侧controller B显示导航条，类似这个效果：</p>

<p><img class="left" src="/images/blog/push_navigation_bar/push_navigation_bar1.JPG" width="375" height="667"></p>

<!--more-->


<p>实现步骤如下：</p>

<h4>1. navigation controller中推入controller A，在controller A初始化阶段设置导航条隐藏：</h4>

<pre><code class="objective-c">- (void)viewDidLoad
{
    [super viewDidLoad];

    ...
    self.navigationController.navigationBarHidden = YES;
}
</code></pre>

<h4>2. controller B在viewWillAppear时设置navigationBar显示，viewWillDisappear中设置navigationBar隐藏，animated要为YES</h4>

<pre><code>- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.navigationController setNavigationBarHidden:NO animated:YES];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [self.navigationController setNavigationBarHidden:YES animated:YES];
}
</code></pre>

<h4>3.如果controller B需要退出其他页面显示导航条，还需自行标记，使仅在back时切换显示/隐藏导航条</h4>

<p>下面代码增加了pushingViewController标记，记录是否在推入下一级页面。非推入下一级页面的viewWillDisappear即为back，此时切换导航条为隐藏：</p>

<pre><code>- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    self.pushingViewController = NO;//显示前重置pushingViewController标记
    [self.navigationController setNavigationBarHidden:NO animated:YES];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];

    if (!self.pushingViewController)
    {
        //不是推出下一级的viewWillDisappear（即back时）隐藏navigationBar
        [self.navigationController setNavigationBarHidden:YES animated:YES];
    }
}

- (void)pushOtherController
{
    self.pushViewController = YES;//标记正在推入下一级页面
    [self.navigationController pushViewController:viewController animated:YES];
}
</code></pre>

<p>Over</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[UIWindow setRootViewController:]后view无限叠加的问题修复]]></title>
    <link href="http://openfibers.github.io/blog/2015/12/15/window-setrootviewcontroller-view-not-removed-hack/"/>
    <updated>2015-12-15T17:22:34+08:00</updated>
    <id>http://openfibers.github.io/blog/2015/12/15/window-setrootviewcontroller-view-not-removed-hack</id>
    <content type="html"><![CDATA[<p>工程中有时会直接修改window.rootViewController，来导航到新的页面。<br/>
按理说对window的rootViewController属性设好了新值，老的rootViewController被释放了，UIKit应当自动把老的rootViewController的view一并remove掉，然而实测并非如此。<br/>
在iOS8/9中（更老版本没有测试），当window有rootViewController时，把新的controller赋值给window.rootViewController，老的rootViewController的view还是会留在window上。这些被遗留的view虽然看不见，但是浪费了内存，造成了view泄露；而且view的controller已经dealloc，此时view如果回调或通知controller的话，有造成崩溃的隐患。</p>

<p>多次设置rootViewController后，view结构如图，window上加了多个UILayoutContainerView:</p>

<p><img class="left" src="/images/blog/window_setrootviewcontroller/window_setrootviewcontroller1.JPG"></p>

<!--more-->


<p>Stack Overflow上也有多个对于此问题的讨论，比如<a href="http://stackoverflow.com/questions/26795825/uiwindow-setrootviewcontroller-not-clearing-existing-hierarchy">UIWindow setRootViewController not clearing existing hierarchy</a> 和 <a href="http://stackoverflow.com/questions/26763020/leaking-views-when-changing-rootviewcontroller-inside-transitionwithview">Leaking views when changing rootViewController inside transitionWithView</a>.</p>

<p>实践了一下，因为工程中root window是继承自UIWindow的子类，所以直接重写了此类的<code>setRootViewController:</code>方法：</p>

<pre><code class="objective-c">//hack of setRootViewController: old rootViewController's view never removed from window
- (void)setRootViewController:(UIViewController *)rootViewController
{
    //remove old rootViewController's sub views
    for (UIView* subView in self.rootViewController.view.subviews)
    {
        [subView removeFromSuperview];
    }

    //remove old rootViewController's view
    [self.rootViewController.view removeFromSuperview];

    //set new rootViewController
    [super setRootViewController:rootViewController];

    //remove empty UILayoutContainerView(s) remaining on root window
    for (UIView *subView in self.subviews)
    {
        if (subView.subviews.count == 0)
        {
            [subView removeFromSuperview];
        }
    }
}
</code></pre>

<p>Over</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8的UITextView输入光标显示不全的hack]]></title>
    <link href="http://openfibers.github.io/blog/2015/11/30/uitextview-auto-scroll-in-ios8/"/>
    <updated>2015-11-30T14:47:21+08:00</updated>
    <id>http://openfibers.github.io/blog/2015/11/30/uitextview-auto-scroll-in-ios8</id>
    <content type="html"><![CDATA[<p>在iOS8及以下版本的系统上，在定高的UITextView中，输入内容超过Text View高度后，输入光标有时会在Text View的底部显示不全，如<a href="http://stackoverflow.com/questions/18070537/how-to-make-a-uitextview-scroll-while-typing-editing">how-to-make-a-uitextview-scroll-while-typing-editing</a>中截图所描述。</p>

<p>尝试了各种方案，挑选了一种体验较好的。在<code>textViewDidChanged:</code>中，检测到正在编辑的区域在文字最下行，无动画滚动到结尾：</p>

<pre><code class="objective-c">- (void)textViewDidChange:(UITextView *)textView
{
    //hack for iOS8
    if (isLessThanIOS9)//in iOS9 Apple has already fixed this bug
    {
        CGRect line = [textView caretRectForPosition:
                       textView.selectedTextRange.start];
        CGFloat overflow = line.origin.y + line.size.height
        - (textView.contentOffset.y + textView.bounds.size.height
           - textView.contentInset.bottom - textView.contentInset.top);
        if (overflow &gt; 0)//If at the bottom of text view
        {
            //disable animation. Otherwise, when a input confirm scroll animation is doing, input new text, animation will re-do from animation beginning, which looks strange.
            [UIView setAnimationsEnabled:NO];

            //scroll to text end
            [textView scrollRangeToVisible:NSMakeRange([textView.text length], 0)];
            [UIView setAnimationsEnabled:YES];
        }
    }
}
</code></pre>

<p>Over</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone SDK Bug Collection]]></title>
    <link href="http://openfibers.github.io/blog/2015/11/01/iphone-sdk-bug-collection/"/>
    <updated>2015-11-01T21:01:42+08:00</updated>
    <id>http://openfibers.github.io/blog/2015/11/01/iphone-sdk-bug-collection</id>
    <content type="html"><![CDATA[<ol>
<li><p>convertRect:fromView 返回乘以screen scale以后的结果：<br/>
在iOS8上，view如果未添加到任何window，调用此方法可能会出现此后果。</p></li>
<li><p>定高UITextView输入时，文字超过text view高度，输入光标被遮挡或截断，显示不全，继续输入时正在输入的内容也被遮挡:<br/>
参考<a href="http://openfibers.github.io/blog/2015/11/30/uitextview-auto-scroll-in-ios8/">iOS8的UITextView输入光标显示不全的hack</a>。</p></li>
<li><p>window.rootViewController设置后，老的rootViewController的view仍然贴在window上：<br/>
参考<a href="http://openfibers.github.io/blog/2015/12/15/window-setrootviewcontroller-view-not-removed-hack/">[UIWindow setRootViewController:]后view无限叠加的问题修复</a>。</p></li>
</ol>


<p>Over</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理iPhone6、6+标准视图和放大视图 & 新增的[UIScreen nativeScale]方法]]></title>
    <link href="http://openfibers.github.io/blog/2015/03/10/uiscreen-nativescale-method-handle-standard-zoomed/"/>
    <updated>2015-03-10T14:08:47+08:00</updated>
    <id>http://openfibers.github.io/blog/2015/03/10/uiscreen-nativescale-method-handle-standard-zoomed</id>
    <content type="html"><![CDATA[<h3>标准模式与放大模式</h3>

<p>iPhone6和6+的设置(Settings)->显示与亮度(Display &amp; Brightness)->显示模式(View)都带有标准模式(Standard)和放大模式(Zoomed)。<br/>
这个功能被引入后，依赖<code>[UIScreen bounds]</code>和<code>[UIScreen scale]</code>并不能完全确定屏幕分辨率是多大、用户选择了放大试图还是标准视图。比如放大模式下iPhone6读到的这两个属性和iPhone5是一模一样的，而放大模式下iPhone6+的<code>[UIScreen bounds]</code>属性和标准模式下iPhone6的一样。</p>

<p>iOS8中苹果引入了<code>[UIScreen screenScale]</code>，可以用来区分不同的显示模式。</p>

<!--more-->


<h3>关于[UIScreen screenScale]</h3>

<p>官方文档给出的解释则非常惜字如金：</p>

<pre><code>The native scale factor for the physical screen. (read-only)
</code></pre>

<p>何为<code>native scale factor</code>? 写文档这哥们有点懒啊，妥妥的中国大陆互联网公司文档范儿，搞不好是本着&#8217;不知道上层用户用得着用不着先开放了再说&#8217;的原则做的底层。猜测是物理分辨率与<code>[UIScreen bounds]</code>的比值。光猜不放心，最好还是做个实验看下这个猜测是不是对的。</p>

<pre><code class="objective-c">    CGRect bounds = [[UIScreen mainScreen] bounds];
    NSString *screenMode = [[UIScreen mainScreen].coordinateSpace description];
    CGFloat scale = [[UIScreen mainScreen] scale];
    CGFloat nativeScale = [[UIScreen mainScreen] nativeScale];

    NSLog(@"\n bounds: %@\n screen mode: %@\n scale: %f\n native scale: %f", NSStringFromCGRect(bounds), screenMode, scale, nativeScale);
</code></pre>

<p>iPhone6标准模式下输出：</p>

<pre><code>ScreenTest[3441:3088752] 
 bounds: { {0, 0}, {375, 667} }
 screen mode: &lt;UIScreen: 0x155603cd0; bounds = { {0, 0}, {375, 667} }; mode = &lt;UIScreenMode: 0x170021f40; size = 750.000000 x 1334.000000&gt;&gt;
 scale: 2.000000
 native scale: 2.000000
</code></pre>

<p>iPhone6放大模式下输出：</p>

<pre><code>ScreenTest[3454:3089937] 
 bounds: { {0, 0}, {320, 568} }
 screen mode: &lt;UIScreen: 0x12ee03d40; bounds = { {0, 0}, {320, 568} }; mode = &lt;UIScreenMode: 0x1700256e0; size = 640.000000 x 1136.000000&gt;&gt;
 scale: 2.000000
 native scale: 2.343750
</code></pre>

<p>2.343750是个啥？1134/568是2.34859154，比较接近了。而750/320就是2.343750。</p>

<p>再来看iPhone6+标准模式下输出：</p>

<pre><code>ScreenTest[1876:465146] 
 bounds: { {0, 0}, {414, 736} }
 screen mode: &lt;UIScreen: 0x13ee01840; bounds = { {0, 0}, {414, 736} }; mode = &lt;UIScreenMode: 0x17002b4e0; size = 1242.000000 x 2208.000000&gt;&gt;
 scale: 3.000000
 native scale: 2.608696
</code></pre>

<p>iPhone6+放大模式下输出：
<code>
ScreenTest[1893:466244]
 bounds: { {0, 0}, {375, 667} }
 screen mode: &lt;UIScreen: 0x13f6021f0; bounds = { {0, 0}, {375, 667} }; mode = &lt;UIScreenMode: 0x170028c20; size = 1125.000000 x 2001.000000&gt;&gt;
 scale: 3.000000
 native scale: 2.880000
</code></p>

<p>iPhone6+的物理分辨率是1080*1920，1080/414是2.608696，1080/375是2.880000。<br/>
需要注意的是此接口从iOS8开始支持。代码里要用的话记得加个保护。</p>

<h3>苹果希望开发者们怎样做？</h3>

<p>从文档来推断，UIKit的设计者可能觉得这个接口使用频率不会很高，以至于文档里只给出了一句不清晰的解释，没说明比值以宽度计算，也没给出其他建议。继续推断在UIKit的设计者认为<code>[UIScreen bounds]</code>和<code>[UIScreen scale]</code>才是写layout时主力的检测分辨率方法，无论是CoreGraphics还是图片scale选取，都应该以<code>[UIScreen scale]</code>为准。在iPhone6上，无论标准模式还是放大模式，scale始终是2，所以绘制和图片都应该选择2倍大小；iPhone6+上，无论标准模式还是放大模式，scale始终是3，所以绘制和图片都应该选择3倍大小。</p>

<p>当然UIKit并不是开发UI的唯一方式，于是<code>[UIScreen nativeScale]</code>有了其存在的更多意义，尤其是做偏底层的绘制工作时。</p>

<p>Over</p>
]]></content>
  </entry>
  
</feed>

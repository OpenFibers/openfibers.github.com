<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bigsur | Hack Life of OpenFibers]]></title>
  <link href="http://openfibers.github.io/blog/categories/bigsur/atom.xml" rel="self"/>
  <link href="http://openfibers.github.io/"/>
  <updated>2020-09-11T15:53:02+08:00</updated>
  <id>http://openfibers.github.io/</id>
  <author>
    <name><![CDATA[OpenFibers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[macOS BigSur 适配指引]]></title>
    <link href="http://openfibers.github.io/blog/2020/09/07/make-app-compatible-with-macos-bigsur/"/>
    <updated>2020-09-07T17:06:28+08:00</updated>
    <id>http://openfibers.github.io/blog/2020/09/07/make-app-compatible-with-macos-bigsur</id>
    <content type="html"><![CDATA[<h2>在 Apple Silicon 上做性能分析</h2>

<ul>
<li>原生代码一般都会比转码性能更好</li>
<li>小心使用 Intel 专有的代码优化（SSE, AVX）

<ul>
<li>可能需要针对 Apple Silicon 的优化版本</li>
</ul>
</li>
<li>尽可能使用 Apple 提供的 AP (Accelerate framework)</li>
</ul>


<h2>Apple Silicon 的非对称 CPU 核心</h2>

<ul>
<li>Apple Silicon Mac 有两种类型的核心

<ul>
<li>高性能核心（P Cores）</li>
<li>节能核心（Cores)</li>
<li>在高并发任务场景下，所有的核心可以同时开启</li>
</ul>
</li>
</ul>


<h2>避免使用忙等和 spinlock</h2>

<ul>
<li>忙等会占用性能核心，进而导致任务延迟</li>
<li>推荐的阻塞同步原语

<ul>
<li>NSLock, os_unfair_lock, pthread mutexes</li>
<li>NSCondition, pthread 条件变量</li>
</ul>
</li>
<li>避免按照 CPU 的数量划分工作任务</li>
</ul>


<pre><code>// Prefer blocking locks and condition variables
func performWorkUnderSpinlock () {
    os_unfair_lock_lock()
    performWork()
    os_unfair_lock_unlock()
}

func retrieveNextWorkTask() -&gt; WorkTask {
    condition.lock()
    while !taskQueue.hasAnyWork {
        condition.wait()
    }
    let task = taskQueue.pop()
    condition.unlock()
    return task
}
</code></pre>

<h2>在 Apple Silicon 上调试、测试和性能分析</h2>

<ul>
<li>构建工作可以使用任何 Mac，但是运行 arm64 代码只能在 Apple Silicon Mac 上</li>
<li>分别测试原生和 Rosetta 的运行方式</li>
<li>注意 Intel 专有代码和忙等的实现</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;">   </th>
<th style="text-align:center;"> 第一方<br>从源码编译<br>和你的 app 一起发布 </th>
<th style="text-align:right;"> 第三方<br>预先编译好的二进制<br>和 app 一起或者单独发布 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 进程内      </td>
<td style="text-align:center;"> √ </td>
<td style="text-align:right;">         √ </td>
</tr>
<tr>
<td style="text-align:left;"> 进程外      </td>
<td style="text-align:center;"> √        </td>
<td style="text-align:right;"> x<br>原生 app 只能加载原生插件<br>Rosetta 转码 ap 只能加载 x86_64 插件 </td>
</tr>
</tbody>
</table>


<h2>通过 XPC 使用进程外插件</h2>

<ul>
<li>每个插件一个进程或者每种架构一个进程</li>
<li>更好的稳定性和安全性</li>
</ul>


<h2>为了插件使用 Rosetta</h2>

<ul>
<li>用户可以强制一个通用 app 通过 Rosetta 启动</li>
<li>通过 Info.pist 关键字可以禁用</li>
<li>详见 macOS 移植文档</li>
</ul>


<h2>警惕多线程缺陷</h2>

<ul>
<li>Intel CPU 和 Apple Silicon 采用不同的内存排序模型</li>
<li>正确的代码有相同的行为，有缺陷的代码（争条件，数据竟争）却各有各的表现

<ul>
<li>一个数据竞争在 Intel CPU 上也许不显露，却有可能在 Apple Silicon 上导致崩溃</li>
<li>Rosetta 提供 Intel CPU 相同的内存排序</li>
</ul>
</li>
<li>使用 Thread Sanitizer 来发现和防止数据竞争问题</li>
</ul>


<h2>兼容性</h2>

<ul>
<li>兼容的 app 自动可见</li>
<li>可以在 App Store Connect 管理</li>
</ul>


<h2>硬件的区别</h2>

<ul>
<li>鼠标和触控事件</li>
<li>环境传感器的区别

<ul>
<li>陀螺仪</li>
<li>指南针</li>
<li>雷达摄像头</li>
<li>GPS</li>
</ul>
</li>
<li>相机

<ul>
<li>使用 AVCaptureDeviceDiscoverySession 自动兼容</li>
</ul>
</li>
<li>照片选取</li>
</ul>

]]></content>
  </entry>
  
</feed>

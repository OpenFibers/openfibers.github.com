<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Hack Life of OpenFibers]]></title>
  <link href="http://openfibers.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://openfibers.github.io/"/>
  <updated>2020-06-24T18:32:16+08:00</updated>
  <id>http://openfibers.github.io/</id>
  <author>
    <name><![CDATA[OpenFibers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[单页面隐藏 Navigation Bar，同时保持右滑手势退出页面的终极方案]]></title>
    <link href="http://openfibers.github.io/blog/2019/08/19/hide-navigation-bar-with-pop-gesture/"/>
    <updated>2019-08-19T15:15:43+08:00</updated>
    <id>http://openfibers.github.io/blog/2019/08/19/hide-navigation-bar-with-pop-gesture</id>
    <content type="html"><![CDATA[<h3>1. 隐藏 navigation bar</h3>

<p>在需要隐藏 navigation bar 的 view controller 中：</p>

<pre><code class="objective-c">
- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self hideNavBar];
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    [self showNavBar];
}

- (void)hideNavBar
{
    if (self.navigationController.viewControllers.lastObject == self) //避免推出下一个隐藏bar bar的vc过场动画展示了nav bar
    {
        [self.navigationController setNavigationBarHidden:YES animated:YES];
    }
}

- (void)showNavBar
{
    if (self.navigationController.viewControllers.lastObject == self) //避免推出下一个隐藏bar bar的vc过场动画展示了nav bar
    {
        [self.navigationController setNavigationBarHidden:NO animated:YES];
    }
}
</code></pre>

<!--more-->


<h3>2. 把手势搞出来</h3>

<p>新增两个类：</p>

<p>1) OTInteractivePopRecognizerDelegate:</p>

<pre><code>@interface OTInteractivePopRecognizerDelegate : NSObject &lt;UIGestureRecognizerDelegate&gt;
@property (nonatomic, weak) UINavigationController *navigationController;
@end

@implementation OTInteractivePopRecognizerDelegate

- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
{
    return self.navigationController.viewControllers.count &gt; 1;
}

- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer
{
    return YES;
}

@end
</code></pre>

<p>2) OTNavigationPopGestureUtil</p>

<pre><code>#import &lt;objc/runtime.h&gt;

@interface OTNavigationPopGestureUtil : NSObject

+ (void)protectNavigationController:(UINavigationController *)navigationController;

@end

@implementation OTNavigationPopGestureUtil

+ (void)protectNavigationController:(UINavigationController *)navigationController
{
    OTInteractivePopRecognizerDelegate *popRecognizer = objc_getAssociatedObject(navigationController, _cmd);
    if (!popRecognizer)
    {
        popRecognizer = [[OTInteractivePopRecognizerDelegate alloc] init];
        popRecognizer.navigationController = navigationController;
        navigationController.interactivePopGestureRecognizer.delegate = popRecognizer;
        objc_setAssociatedObject(navigationController, _cmd, popRecognizer, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    }
}

@end
</code></pre>

<p>在需要隐藏 navigation bar 的 view controller 中：</p>

<pre><code>- (void)viewDidLoad
{
    [super viewDidLoad];
    [OTNavigationPopGestureUtil protectNavigationController:self.navigationController];
}
</code></pre>

<p>Over</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone Popover above iOS9]]></title>
    <link href="http://openfibers.github.io/blog/2019/01/29/iphone-popover-above-ios9/"/>
    <updated>2019-01-29T16:44:13+08:00</updated>
    <id>http://openfibers.github.io/blog/2019/01/29/iphone-popover-above-ios9</id>
    <content type="html"><![CDATA[<p>直接上图上代码。。。</p>

<p><img class="left" src="/images/blog/iphone_popover/iphone_popover.jpg"></p>

<p>OTPopoverMenuViewController.h:</p>

<pre><code class="objective-c">@interface OTPopoverMenuViewController : UIViewController

- (void)presentInController:(UIViewController *)controller
                 sourceView:(UIView *)view;

- (void)presentInController:(UIViewController *)controller
              barButtonItem:(UIBarButtonItem *)barButtonItem;


@end
</code></pre>

<!--more-->


<p>OTPopoverMenuViewController.m:</p>

<pre><code class="objective-c">#import "OTPopoverMenuViewController.h"

@interface OTPopoverMenuViewController () &lt;UIPopoverPresentationControllerDelegate&gt;

@end

@implementation OTPopoverMenuViewController

- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self)
    {
        self.modalPresentationStyle = UIModalPresentationPopover;

        UIPopoverPresentationController *popController = [self popoverPresentationController];
        self.preferredContentSize = CGSizeMake(100, 100);
        popController.permittedArrowDirections = UIPopoverArrowDirectionUp;
        popController.delegate = self;

        [self initUI];
    }
    return self;
}

- (void)presentInController:(UIViewController *)controller
                 sourceView:(UIView *)view
{
    UIPopoverPresentationController *popController = [self popoverPresentationController];
    popController.sourceView = view;
    popController.sourceRect = view.bounds;
    [controller presentViewController:self animated:YES completion:nil];
}

- (void)presentInController:(UIViewController *)controller
              barButtonItem:(UIBarButtonItem *)barButtonItem
{
    UIPopoverPresentationController *popController = [self popoverPresentationController];
    popController.barButtonItem = barButtonItem;
    [controller presentViewController:self animated:YES completion:nil];
}

- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController *)controller
{
    return UIModalPresentationNone;
}

- (void)initUI
{

}

@end
</code></pre>

<p>调用:</p>

<pre><code class="objective-c">OTPopoverMenuViewController *controller = [[OTPopoverMenuViewController alloc] init];
[controller presentInController:self sourceView:view];
//或
[controller presentInController:self barButtonItem:barButtonItem];
</code></pre>

<p>Over</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Messages Framework 开发文档（Sticker Packs 与 iMessage Apps）]]></title>
    <link href="http://openfibers.github.io/blog/2016/10/22/message-app-development/"/>
    <updated>2016-10-22T04:22:11+08:00</updated>
    <id>http://openfibers.github.io/blog/2016/10/22/message-app-development</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>开发者可以为 iOS 10 的 Messages app 创建 extension。用户在其中可以发送文字、表情、媒体文件、交互式消息（交互式消息即 interactive messages，是一种允许被对话的参与者更新状态的消息）。</p>

<p>第三方软件可以使用 Messages framework 创建两种 app extension: 表情包（Sticker packs）和 iMessage apps。这两种 app extension 都可以作为现有主 app 的 extension 来发布，也可以单独发布。</p>

<p><strong>为了方便理解后文内容，强烈建议先玩一下：</strong><br/>
1. Sticker pack 比如知乎刘看山<br/>
2. GamePigeon中的台球<br/>
3. 大众点评的订电影票</p>

<!--more-->


<h2>表情包简介</h2>

<p>表情包（Sticker packs）是一组不能变更（指不允许增删改图片文件，允许gif动图）的表情图片。表情图片可以被当做一条消息单独发送，也可以附加到一条已有消息的气泡上。创建表情包并不需要写任何代码，把图片拖拽到 Stickers asset catalog 中的 Sticker Pack 文件夹下即可。用作表情的图片必须符合以下规范：</p>

<ul>
<li>必须是 PNG, APNG, GIF, 或 JPEG 格式的文件。</li>
<li>每张图片必须小于 500 KB。</li>
<li>图片不能小于 100 x 100 points 或大于 206 x 206 points，以保证最佳显示效果。</li>
<li>仅提供 @3x 的图片即可（在 300 x 300 像素到 618 x 618 之间）。系统会在运行时缩放生成 @2x 和 @1x 的版本。</li>
</ul>


<p>Messages 仅支持三种尺寸的表情。表情被显示在 grid-based browser中。表情图片尺寸需要在 Xcode 的 Attributes inspector 中设置。支持的尺寸有：</p>

<ul>
<li>小图： 100 x 100 points @3x (300 x 300 pixels).</li>
<li>中图： 136 x 136 points @3x (408 x 408 pixels).</li>
<li>大图： 206 x 206 points @3x (618 x 618 pixels).</li>
</ul>


<h4>适用范围：</h4>

<ol>
<li>除了纯粹做表情</li>
<li>可以为 app 做 branding</li>
<li>除此之外似乎并没什么卵用</li>
</ol>


<p>更多关于创建 sticker packs 的话题，参考<a href="https://developer.apple.com/support/stickers/motion/">Creating Stickers with Motion</a>。</p>

<h2>iMessage Apps 简介</h2>

<p>iMessage apps 可以用来：</p>

<ul>
<li><p>在 Messages app 中呈现自定义UI：参考 <a href="https://developer.apple.com/reference/messages/msmessagesappviewcontroller?language=objc">MSMessagesAppViewController</a>。</p></li>
<li><p>创建自定义或动态 sticker browser：参考 <a href="https://developer.apple.com/reference/messages/msstickerbrowserviewcontroller?language=objc">MSStickerBrowserViewController</a>。</p></li>
<li><p>向 Messages app 的输入框插入文字、表情或媒体文件：参考 <a href="https://developer.apple.com/reference/messages/msconversation?language=objc">MSConversation</a>。</p></li>
<li><p>创建携带 app 特定数据的交互式消息：参考 <a href="https://developer.apple.com/reference/messages/msmessage?language=objc">MSMessage</a>。</p></li>
<li><p>更新交互式消息 (比如游戏或合作类 apps&mdash;-举个例子，台球或大众点评约朋友一起电影)：参考 <a href="https://developer.apple.com/reference/messages/mssession?language=objc">MSSession</a>。</p></li>
</ul>


<h4>适用范围</h4>

<p>当用户点击一条交互式消息时，系统会弹出一个 controller ，开发者可以在其中做很多事。<br/>
Messages extension 可以与主 app 共享数据，也能单独做一个完整应用，也有单独访问网络权限。  <br/>
适合交互式场景的应用或游戏。<br/>
适合需要分享和 IM ，但是客户端中内嵌 IM 有点重的 app。</p>

<p>更多创建 app extension 的话题请参考 <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214">App Extension Programming Guide</a>。</p>

<h2>Symbols</h2>

<h4>Classes</h4>

<ol>
<li><p><a href="https://developer.apple.com/reference/messages/msconversation?language=objc">MSConversation</a><br/>
MSConversation 在 Messages app 中用来表示一组对话。使用 conversation 对象可以获取当前单聊或者群聊中的信息，或者发送文字、表情、附件或其他消息对象。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/msmessage?language=objc">MSMessage</a><br/>
MSMessage 用来创建交互式消息对象。如果要创建一个能被对话中的其他人更新状态的消息，使用<code>initWithSession:</code>初始化，否则使用<code>init</code>初始化。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/msmessagelayout?language=objc">MSMessageLayout</a><br/>
MSMessageLayout 是用来定义 MSMessage 显示样式的抽象基类，每种子类对应一个显示样式，然而，目前只有一个子类<code>MSMessageTemplateLayout</code>。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/msmessagesappviewcontroller?language=objc">MSMessagesAppViewController</a><br/>
MSMessagesAppViewController 是 Messages extension 中的 principal view controller，当 Message app 换起 extension 时，这个controller 就会出现。向其添加不同的子 controller 以实现不同的 feature。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/msmessagetemplatelayout?language=objc">MSMessageTemplateLayout</a><br/>
MSMessageTemplateLayout 是 MSMessageLayout 的子类。描述 MSMessage 在消息中如何显示。消息模板包含 message extension 的 icon，一份图片/视频/音频文件，以及一组文字元素（title, subtitle, caption, subcaption, trailing caption, and trailing subcaption）。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/mssession?language=objc">MSSession</a><br/>
用来创建交互式消息的对象。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/mssticker?language=objc">MSSticker</a><br/>
Messages app 中的表情对象。Sticker 可以被单独发送，也可以被附加到一条已存在的消息的气泡上。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/msstickerbrowserview?language=objc">MSStickerBrowserView</a><br/>
MSStickerBrowserView 用来显示动态生成的表情列表。用户用户可以点击 browser 中的表情将其加到输入框内，也可以将表情从 browser 中拖拽到任意消息气泡上。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/msstickerbrowserviewcontroller?language=objc">MSStickerBrowserViewController</a>
MSStickerBrowserViewController 用来显示标准表情 browser。和MSStickerBrowserView一样，用户点击表情插入输入框内，或拖拽表情来附加到任意气泡上。</p></li>
<li><p><a href="https://developer.apple.com/reference/messages/msstickerview?language=objc">MSStickerView</a><br/>
MSStickerView 用来显示表情对象。和上面一样，点击插入输入框，拖拽附加到气泡。</p></li>
</ol>


<h4>Protocols</h4>

<ol>
<li><a href="https://developer.apple.com/reference/messages/msstickerbrowserviewdatasource?language=objc">MSStickerBrowserViewDataSource</a><br/>
动态为表情 browser 提供表情时需实现此协议。</li>
</ol>


<h4>相关文档</h4>

<ol>
<li><a href="https://developer.apple.com/reference/messages/2216109-errors?language=objc">Errors</a><br/>
此文档描述了表情包和 Message apps 中使用的错误类型和错误代码（error code not error source code）。</li>
<li><a href="https://developer.apple.com/reference/messages/1990031-messages_enumerations?language=objc">Messages Enumerations</a><br/>
MSMessagesAppPresentationStyle:  描述 controller 的展示样式，是收起在底部，还是伸展到全屏。<br/>
MSStickerSize :  描述表情的显示尺寸。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dispatch_once造成的死锁----分析、解决与自动检测]]></title>
    <link href="http://openfibers.github.io/blog/2016/10/22/deadlock-caused-by-dispatch-once/"/>
    <updated>2016-10-22T03:40:14+08:00</updated>
    <id>http://openfibers.github.io/blog/2016/10/22/deadlock-caused-by-dispatch-once</id>
    <content type="html"><![CDATA[<h3>现象</h3>

<p>最近遇到了一个死锁crash，主线程在dispatch_once时卡住了：</p>

<pre><code class="objective-c">Thread 0 name:  Dispatch queue: com.apple.main-thread
Thread 0 Crashed:
0   __ulock_wait + 8
1   _dispatch_unfair_lock_wait + 48
2   _dispatch_gate_wait_slow + 56
3   dispatch_once_f + 124
4   +[OTPolicyCenter sharedInstance] (once.h:68)
7   +[OTWebViewUtil completeUrlScheme:] (OTWebViewUtil.m:26)
...
30  start + 4
</code></pre>

<p>卡死的代码很简单，世界上的单例基本上都是这么开的：</p>

<pre><code>+ (OTPolicyCenter *)sharedInstance
{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        policyCenterInstance = [[OTPolicyCenter alloc] init];
    });
    return policyCenterInstance;
}
</code></pre>

<!--more-->


<p>其他线程大多数也都卡住了（除了带runloop的线程和事情还没做完的线程）：</p>

<pre><code>Thread 1:
0   __psynch_cvwait + 8
1   _pthread_cond_wait + 640
2   -[__NSOperationInternal _waitUntilFinished:] + 132
3   -[__NSObserver _doit:] + 232
4   __CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20
5   _CFXRegistrationPost + 400
6   ___CFXNotificationPost_block_invoke + 60
7   -[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1504
8   _CFXNotificationPost + 376
9   -[NSNotificationCenter postNotificationName:object:userInfo:] + 68
10  -[CTTelephonyNetworkInfo queryDataMode] + 408
11  -[CTTelephonyNetworkInfo init] + 336
12  -[OTReachability networkStatusForFlags:] (AFReachability.m:216)
...
25  start_wqthread + 4

Thread 4:
0   __semwait_signal + 8
1   nanosleep + 212
2   usleep + 64
3   wpthread_main + 216
4   _pthread_body + 240
5   _pthread_body + 0
6   thread_start + 4

Thread 7 name:  Dispatch queue: com.apple.root.default-qos
Thread 7:
0   semaphore_wait_trap + 8
1   _dispatch_semaphore_wait_slow + 216
2   CFURLConnectionSendSynchronousRequest + 284
3   +[NSURLConnection sendSynchronousRequest:returningResponse:error:] + 120
4   +[UTMCHttpHelper post:url:dict:len:errorCode:] + 1864
5   __39-[UTMCOnlineConfManager syncOnlineconf]_block_invoke + 660
6   _dispatch_call_block_and_release + 24
7   _dispatch_client_callout + 16
8   _dispatch_queue_override_invoke + 732
9   _dispatch_root_queue_drain + 572
10  _dispatch_worker_thread3 + 124
11  _pthread_wqthread + 1288
12  start_wqthread + 4

Thread 18 name:  Dispatch queue: com.apple.NSURLSession-work
Thread 18:
0   __psynch_cvwait + 8
1   _pthread_cond_wait + 640
2   -[__NSOperationInternal _waitUntilFinished:] + 132
3   -[__NSObserver _doit:] + 232
4   __CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20
5   _CFXRegistrationPost + 400
6   ___CFXNotificationPost_block_invoke + 60
7   -[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1504
8   _CFXNotificationPost + 376
9   -[NSNotificationCenter postNotificationName:object:userInfo:] + 68
10  -[CTTelephonyNetworkInfo queryDataMode] + 408
11  -[CTTelephonyNetworkInfo init] + 336
12  -[OTPolicyCenter init] (OTPolicyCenter.m:52)
13  __31+[OTPolicyCenter sharedInstance]_block_invoke (OTPolicyCenter.m:43)
14  _dispatch_client_callout + 16
15  dispatch_once_f + 56
16  +[OTPolicyCenter sharedInstance] (once.h:68)
17  +[OTUtils singletonObject:getter:] (OTUtils.m:271)
...
43  start_wqthread + 4
</code></pre>

<h3>原因</h3>

<p>在主线程中卡死前的一行<code>[OTPolicyCenter sharedInstance]</code>，在线程18中也找到了相同的调用。</p>

<p>再来看一眼这个简单的单例方法：</p>

<pre><code>+ (OTPolicyCenter *)sharedInstance
{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        policyCenterInstance = [[OTPolicyCenter alloc] init];
    });
    return policyCenterInstance;
}
</code></pre>

<p>线程18首先进入了<code>sharedInstance</code>，在<code>dispatch_once(&amp;onceToken, ^)</code>时锁住了<code>onceToken</code>，主线程稍后进入<code>sharedInstance</code>，阻塞在<code>dispatch_once(&amp;onceToken, ^)</code>这里，而线程18继续往下执行到<code>[[OTPolicyCenter alloc] init]</code>。</p>

<p>此时线程18阻塞式的向主线程发出了操作：<code>[__NSOperationInternal _waitUntilFinished:]</code>。因为主线程在阻塞中等待<code>onceToken</code>，所以主线程不能接收线程18的通知，于是线程18一直在等主线程接受通知，也不会去释放<code>onceToken</code>，死锁生成。</p>

<p>至于为什么<code>[NSNotificationCenter postNotificationName:object:userInfo:]</code>会同步等待主线程返回，猜测苹果自己在实现中接收通知是这样做的，要求接收通知的block在mainQueue上执行：<br/>
<code>
[[NSNotificationCenter defaultCenter]
  addObserverForName:NotificationName
              object:nil
               queue:[NSOperationQueue mainQueue]
          usingBlock:^(NSNotification *ns) {
              NSLog(@"Notification %@", ns);
}];
</code></p>

<p>当然此时线程18上如果不是发了一个阻塞式的通知，而是做了一些其他的需要在主线程执行并同步返回的事，也会造成死锁。</p>

<p><img class="left" src="/images/blog/dispatch_once_deadlock/dispatch_once_deadlock.jpg" width="592"></p>

<h3>解决方案</h3>

<ol>
<li><p>自动解决或加保护？<br/>
如果围绕自动解决或者加保护的方式来做，禁止子线程同步调用主线程也好是不现实的（总有业务限制），禁止子线程和主线程共享单例也是不现实的（总有业务限制），所有单例串行执行可能会造成性能问题而且风险很大。目前还没想到可行的方案。</p></li>
<li><p>静态检测工具？<br/>
首先要做静态分析，毕竟之前没做过，门槛太高，性价比低，放弃。</p></li>
<li><p>运行时检测工具？<br/>
想做运行时检测有两件事要做：<br/>
<strong>第一件事，在线程申请加锁和解锁once token时，对线程打标记：</strong><br/>
自己的代码中可以用宏定义改掉dispatch_once的实现，在其中对线程打标记，这个应该不难。<br/>
别人的代码中只能在运行时里面换出sharedInstance, defaultManager等方法来打标记。<br/>
<strong>第二件事，找出子线程准备锁主线程的位置：</strong><br/>
仅可以 hook objective-c 实现的同步方法，不能 hook GCD 的同步方法，所以仍要靠人肉review，而且只能review自己代码，不能review SDK。<br/>
结论是制作此工具可以用作预检，减轻我们部分负担。有时间可以尝试写一下。</p></li>
<li><p>使用的时候人肉多加注意？<br/>
为保证稳定不在dispatch_once中同步执行主线程任务。但是人肉保证难度大。</p></li>
</ol>


<p>结论是3和4可以尝试做一下。</p>

<p>相关问题：<a href="https://medium.com/@elfenlaid/the-good-the-bad-and-the-notification-275198fa2e86#.pyvxgndad">The Good, the Bad and the Notification</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检查iOS App是否支持IPv6-only Network]]></title>
    <link href="http://openfibers.github.io/blog/2016/06/20/support-ipv6-only-network-in-ios/"/>
    <updated>2016-06-20T14:37:10+08:00</updated>
    <id>http://openfibers.github.io/blog/2016/06/20/support-ipv6-only-network-in-ios</id>
    <content type="html"><![CDATA[<p>从2016年6月1号开始，苹果强制要求上架AppStore的应用支持IPv6-only network。<br/>
本文分为两部分：通过代码检查是否兼容IPv6-only网络，以及如何搭建IPv6-only网络的测试环境。旨在帮助快速检查app是否支持IPv6-only Network。可以当做<a href="https://developer.apple.com/library/mac/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html#//apple_ref/doc/uid/TP40010220-CH213-SW1">Supporting IPv6 DNS64/NAT64 Networks</a>中<strong>Ensuring IPv6 DNS64/NAT64 Compatibility</strong>一节的速成版本。</p>

<h2>通过搭建IPv6-only网络的测试环境测试</h2>

<p>最便捷的检查方式是：找一台Mac，共享Internet到IPv6 DNS64/NAT64网络，然后让待测试设备连接到此网络，并测试app功能是否正常。<br/>
需注意，OS X 10.11后才支持创建IPv6 DNS64/NAT64网络。如果待测试设备不是iOS或OS X或macOS设备（比如要测试Andr**d上的app是否兼容IPv6-only网络），请确保设备支持<a href="https://tools.ietf.org/html/rfc6106">RFC6106</a>。</p>

<!--more-->


<p>用在OS X(macOS)上创建IPv6 DNS64/NAT64网络很简单，只需要：</p>

<ol>
<li><strong>Mac带有两块网卡</strong>。如果是Macbook Pro with retina display或者Macbook Air，可以买一块Thunderbolt或USB转RJ45接口的网卡来解决这个问题。</li>
<li><p>打开System Preference，按住Option点击Sharing，松开Option：<br/>
<img class="left" src="/images/blog/support_ipv6_only_network_in_ios/systempreferences_sharing_2x.png" width="633"></p></li>
<li><p>勾选 <strong>Create NAT64 Network</strong>，把来自其他网卡的Internet共享给Wifi：<br/>
<img class="left" src="/images/blog/support_ipv6_only_network_in_ios/systempreferences_sharing_internetsharing_ipv6_2x.png" width="633"></p></li>
<li><p>将测试设备连接到此Wifi，并测试App功能是否正常。</p></li>
</ol>


<h2>检查代码是否兼容IPv6-only网络</h2>

<h4>1. 尽量使用高级API</h4>

<p>尽量使用以下框架实现网络请求：</p>

<ul>
<li><strong>WebKit</strong>.</li>
<li><strong>Cocoa URL loading system</strong>. 比如NSURLSession, NSURLRequest, 和 NSURLConnection。</li>
<li><strong>CFNetwork</strong>.</li>
</ul>


<h4>2. 避免使用IPv4地址</h4>

<ul>
<li><strong>确保在代码中不会传递点分十进制表示的IPv4地址字符串(xxx.xxx.xxx.xxx)到底层网络API</strong>：比如确保不要传递点分十进制表示的IPv4地址字符串到<em>getaddrinfo</em>或<em>SCNetworkReachabilityCreateWithName</em>。需注意前面提到的高级API则会自动转换点分十进制表示的IPv4地址字符串到IPv6，所以在使用高级API时传递点分十进制表示的IPv4地址字符串时仍然可以正常工作。虽然如此，使用高级API时也应避免直接使用点分十进制表示的IPv4地址字符串。</li>
<li><strong>使用地址无关的API</strong>：尽量传递主机名或全称域名（FQDN）给<em>getaddrinfo</em>或<em>getnameinfo</em>。</li>
</ul>


<h4>3. 避免使用网络检查</h4>

<ul>
<li>如果有条件，自己创建网络连接，检查错误状态来代替Reachability（这成本有点大，苹果有点站着说话不腰疼）。</li>
</ul>


<h4>4. 不能避免使用网络检查，则正确使用Reachability API</h4>

<ul>
<li>不要传递0.0.0.0到<strong>SCNetworkReachabilityCreateWithAddress</strong>。这只会检查网络中是否有router，并不代表真正能连接到互联网。</li>
<li>不要传递169.254.0.0（自分配的本地地址）到<strong>SCNetworkReachabilityCreateWithAddress</strong>来检查Wi-Fi是否激活。如需检查是否连接到Wi-Fi，请使用<strong>kSCNetworkReachabilityFlagsIsWWAN</strong>。</li>
</ul>


<h4>5. 正确使用Address Containers</h4>

<ul>
<li>使用足够大的结构来存储IPv6地址来避免溢出，比如<em>sockaddr_storage</em>。</li>
</ul>


<h4>6. 检查是否使用了不兼容IPv6的API</h4>

<p>检查是否使用过IPv4特定的API，包括但不仅限于：</p>

<pre><code class="c">inet_addr()
inet_aton()
inet_lnaof()
inet_makeaddr()
inet_netof()
inet_network()
inet_ntoa()
inet_ntoa_r()
bindresvport()
getipv4sourcefilter()
setipv4sourcefilter()
</code></pre>

<p>如果代码中需要检查IPv4类型，则也应一并检查IPv6类型：</p>

<table>
<thead>
<tr>
<th>IPv4 </th>
<th> IPv6</th>
</tr>
</thead>
<tbody>
<tr>
<td>AF_INET </td>
<td> AF_INET6</td>
</tr>
<tr>
<td>PF_INET </td>
<td> PF_INET6</td>
</tr>
<tr>
<td>struct in_addr </td>
<td> struct in_addr6</td>
</tr>
<tr>
<td>struct sockaddr_in </td>
<td> struct sockaddr_in6</td>
</tr>
<tr>
<td>kDNSServiceProtocol_IPv4 </td>
<td> kDNSServiceProtocol_IPv6</td>
</tr>
</tbody>
</table>


<h4>7. 连接IPv4-only的服务器时，使用getaddrinfo来保证app兼容IPv6-only网络</h4>

<p>如果app需要连接到没有域名的IPv4-only服务器，请使用<em>getaddrinfo</em>处理IPv4地址，好处是当app处于IPv6-only网络时，<em>getaddrinfo</em>会生成一个对应的IPv6地址。</p>

<p>下面的代码展示了如何使用<em>getaddrinfo</em>正确处理IP地址。内存中<em>ipv4_or_ipv6_str</em>存储了一个IP地址（可以是IPv4或IPv6），然后使用<em>getaddrinfo</em>生成了自适应IPv4/IPv6的sockaddr，然后尝试连接到此地址。<br/>
此处有一坑。苹果修改了<em>getaddrinfo</em>以兼容两种网络，但是NAT64下有个bug：第二个参数传port number string，生成的sockaddr的sin_port/sin6_port始终为0；unix原始版本的getaddrinfo则没有这个问题。按照官方文档做法直接在<em>getaddrinfo</em>设置port number string是死活连不上的，建议参考下面代码40行/46行的hack方式，在<em>getaddrinfo</em>后手动设置port number给<em>sockaddr</em>。Demo可以<a href="https://github.com/OpenFibers/openfibers.github.com/raw/source/source/images/blog/support_ipv6_only_network_in_ios/ipv6_test.zip">点此下载</a>：</p>

<pre><code class="c">#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;err.h&gt;

    struct addrinfo hints, *res, *res0;
    int error, s;
    const char *cause = NULL;

    const char *ipv4_or_ipv6_str = "192.0.2.1";//or IPv6 address string is well
    NSUInteger port = 80;//port of connecting server

    memset(&amp;hints, 0, sizeof(hints));
    hints.ai_family = PF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_DEFAULT;
    error = getaddrinfo(ipv4_or_ipv6_str, NULL, &amp;hints, &amp;res0);
    if (error)
    {
        errx(1, "%s", gai_strerror(error));
        /*NOTREACHED*/
    }
    s = -1;
    for (res = res0; res; res = res-&gt;ai_next)
    {
        s = socket(res-&gt;ai_family,
                   res-&gt;ai_socktype,
                   res-&gt;ai_protocol);
        if (s &lt; 0)
        {
            cause = "socket";
            continue;
        }

        switch(res-&gt;ai_addr-&gt;sa_family)
        {
            case AF_INET:
            {
                struct sockaddr_in *v4sa = (struct sockaddr_in *)res-&gt;ai_addr;
                v4sa-&gt;sin_port = htons(port);
            }
                break;
            case AF_INET6:
            {
                struct sockaddr_in6 *v6sa = (struct sockaddr_in6 *)res-&gt;ai_addr;
                v6sa-&gt;sin6_port = htons(port);
            }
                break;
        }

        if (connect(s, res-&gt;ai_addr, res-&gt;ai_addrlen) &lt; 0)
        {
            cause = "connect";
            close(s);
            s = -1;
            continue;
        }

        break;  /* okay we got one */
    }
    if (s &lt; 0)
    {
        err(1, "%s", cause);
        /*NOTREACHED*/
    }
    else
    {
        printf("connected");
    }
    freeaddrinfo(res0);
</code></pre>

<p>需注意，<em>getaddrinfo</em>兼容自动转换至IPv6地址的特性是iOS 9.2和OS X 10.11.2以后才支持的，但是这段代码可以保证在老的操作系统上的兼容性。</p>

<p>Over</p>
]]></content>
  </entry>
  
</feed>
